code_name: 'LAMMPS'
docker:
  image_name: 'mdi/lammps-dftb'

  build_image:
    - apt-get update
    - apt-get install -y git wget vim libblas-dev liblapack-dev xz-utils
    - pip install cmake
    - pip install pymdi
    - pip install mpi4py

  build_engine:
    # Obtain a clone of LAMMPS
    - |
      if [ ! -d "build/lammps" ]; then
        git clone https://github.com/MolSSI-MDI/lammps.git --branch mdi_fix build/lammps
      fi
    - LAMMPS_INSTALL='mpi'
  
    # Build LAMMPS
    - cd build
    - mkdir -p lammps/build
    - cd lammps/build
    - cmake -D PKG_RIGID=yes -D PKG_MOLECULE=yes -D PKG_KSPACE=yes -D PKG_MDI=yes -D BUILD_SHARED_LIBS=yes -D LAMMPS_MACHINE=mpi ../cmake
    - make
    - cp lmp_mpi lmp_mdi
    - cp liblammps_mpi.so liblammps.so

    # Obtain a clone of DFTB+
    - |
      if [ ! -d "build/dftbplus" ]; then
        git clone https://github.com/MolSSI-MDI/dftbplus.git --branch mdi build/dftbplus
      fi

    # Build DFTB+ as a shared library
    - |
      if [ ! -d "/repo/build/dftbplus/build" ]; then
        cd build/dftbplus
        mkdir -p build
        cd build
        cmake -DWITH_API=true -DBUILD_SHARED_LIBS=true -DCMAKE_INSTALL_PREFIX=/repo/build/dftbplus/build/install ..
        make
        make install
      fi

    # Obtain a clone of the MDI DFTB+ wrapper
    - |
      if [ ! -d "/repo/build/dftbplus_mdiwrapper" ]; then
        git clone https://github.com/janash/dftbplus_mdiwrapper.git --branch mdi-commands /repo/build/dftbplus_mdiwrapper
      fi

    # Build the MDI DFTB+ wrapper
    - export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/repo/build/dftbplus/build/install/lib/"
    - cd /repo/build/dftbplus_mdiwrapper
    - mkdir -p build
    - cd build
    - cmake ..
    - make

    # Download parameterization files
    - |
      if [ ! -d "/repo/tests/slakos" ]; then
        cd /repo/tests
        mkdir slakos
        cd slakos
        wget https://dftb.org/fileadmin/DFTB/public/slako/mio/mio-1-1.tar.xz
        tar -xf mio-1-1.tar.xz
        rm mio-1-1.tar.xz
      fi

  validate_engine:
    # Confirm that the engine's executable exists
    - ENGINE_EXECUTABLE="build/lammps/build/lmp_mdi"
    - |
      if test -f "$ENGINE_EXECUTABLE"; then
        echo "$ENGINE_EXECUTABLE exists"
      else
        echo "Could not find engine executable: $ENGINE_EXECUTABLE"
        exit 1
      fi

    # Run a test calculation to confirm that the engine can run correctly
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/repo/build/lammps/src
    - cd tests/engine_validation
    - ../../${ENGINE_EXECUTABLE} -in lammps.in > lammps.out
    - echo "Test output:"
    - cat lammps.out



engine_tests:
  script:
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/repo/build/lammps/src
    - cd tests/mdi_test
    - ../../build/lammps/build/lmp_mdi -mdi "${MDI_OPTIONS}" -in lammps.in > lammps.out




run_scripts:
  plugin:
    containers:
      container1:
        image: 'mdi/lammps'
        script:
          - cd tests/plugin
          - mpiexec -n 1 python3 plugin_driver.py --plugin_name "lammps" --mdi "-role DRIVER -name driver -method LINK -plugin_path /repo/build/lammps/build" --plugin_command_line "-in in.series -log log.series"



  dftb_tcp:
    containers:
      container1:
        image: 'mdi/lammps-dftb'
        script:
          - cd tests/dftb
          - export PATH="$PATH:/repo/build/lammps/build/"
          - mpiexec -n 1 lmp_mpi -mdi "-name aimd -role DRIVER -method TCP -port 8021" -log lammps.log -in lammps.in &

          - export PATH="${PATH}:/repo/build/dftbplus_mdiwrapper/build/src"
          - export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/repo/build/dftbplus/build/install/lib/"
          - dftbplus_mdiwrapper -mdi "-name QM -role ENGINE -method TCP -port 8021 -hostname localhost"


  dftb_sole:
    containers:
      container1:
        image: 'mdi/lammps-dftb'
        script:
          - cd tests/dftb
          - export PATH="${PATH}:/repo/build/dftbplus_mdiwrapper/build/src"
          - export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/repo/build/dftbplus/build/install/lib/"
          - dftbplus_mdiwrapper -mdi "-name QM -role ENGINE -method TEST"