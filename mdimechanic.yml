code_name: 'LAMMPS'
docker:
  image_name: 'mdi/lammps'

  build_image:
    - apt-get update
    - apt-get install -y git wget vim
    - pip install cmake
    - pip install pymdi
    - pip install mpi4py
    - pip install numpy

  build_engine:
    # Obtain a clone of LAMMPS
    - |
      if [ ! -d "/repo/build/lammps" ]; then
        git clone https://github.com/lammps/lammps.git build/lammps
      fi
    - LAMMPS_INSTALL='mpi'

    # Configure LAMMPS
    - cd build
    - |
      if [ ! -d "/repo/build/lammps/build" ]; then
        mkdir -p /repo/build/lammps/build
        cd /repo/build/lammps/build
        cmake -D PKG_RIGID=yes -D PKG_MOLECULE=yes -D PKG_KSPACE=yes -D PKG_MDI=yes -D BUILD_SHARED_LIBS=yes -D LAMMPS_MACHINE=mpi ../cmake
      fi

    # Compile LAMMPS
    - cd /repo/build/lammps/build
    - make -j 4
    - cp lmp_mpi lmp_mdi
    - cp liblammps_mpi.so liblammps.so

    # Obtain a clone of the MDI Library
    - cd /repo
    - |
      if [ ! -d "build/MDI_Library" ]; then
        git clone https://github.com/MolSSI-MDI/MDI_Library.git build/MDI_Library
      fi
    - rm -rf build/MDI_Library/build
    - mkdir -p build/MDI_Library/build
    - cd build/MDI_Library/build
    - cmake -Dpython_package=ON ..
    - make -j 1

  validate_engine:
    # Confirm that the engine's executable exists
    - ENGINE_EXECUTABLE="build/lammps/build/lmp_mdi"
    - |
      if test -f "$ENGINE_EXECUTABLE"; then
        echo "$ENGINE_EXECUTABLE exists"
      else
        echo "Could not find engine executable: $ENGINE_EXECUTABLE"
        exit 1
      fi

    # Run a test calculation to confirm that the engine can run correctly
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/repo/build/lammps/src
    - cd tests/engine_validation
    - ../../${ENGINE_EXECUTABLE} -in lammps.in > lammps.out
    - echo "Test output:"
    - cat lammps.out

    # Run the MDI example calculations
    #- cd ../../
    #- cd build/lammps/examples/USER/mdi
    #- bash -e Script.sh

#  build_engine:
#    # Obtain a clone of LAMMPS
#    - |
#      if [ ! -d "build/lammps" ]; then
#        git clone https://github.com/MolSSI-MDI/lammps.git --branch mdi build/lammps
#      fi
#    - |
#      if [ ! -d "build/lammps/build" ]; then
#        mkdir build/lammps/build
#      fi
#    - cd build/lammps/build
#    - cmake -D PKG_RIGID=yes -D PKG_MOLECULE=yes -D PKG_KSPACE=yes -D PKG_USER-MDI=yes ../cmake
#    - make -j 4

engine_tests:
  script:
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/repo/build/lammps/src
    - cd tests/mdi_test
    - ../../build/lammps/build/lmp_mdi -mdi "${MDI_OPTIONS}" -in lammps.in > lammps.out




run_scripts:
  plugin:
    containers:
      container1:
        image: 'mdi/lammps'
        script:
          - cd tests/plugin
          #- mpiexec -n 1 python3 plugin_driver.py --plugin_name "lammps" --mdi "-role DRIVER -name driver -method LINK -plugin_path /repo/build/lammps/build" --plugin_command_line "foo -in in.series -log log.series"
          - mpiexec -n 1 python3 plugin_driver.py --plugin_name "lammps" --mdi "-role DRIVER -name driver -method LINK -plugin_path /repo/build/lammps/build" --plugin_command_line "-in in.series -log log.series"

  exaalt:
    containers:
      container1:
        image: 'mdi/lammps'
        script:
          - cd tests/exaalt
          #- mpiexec -n 1 python3 plugin_driver.py --plugin_name "lammps" --mdi "-role DRIVER -name driver -method LINK -plugin_path /repo/build/lammps/build" --plugin_command_line "foo -in in.series -log log.series"
          - mpiexec -n 4 python3 test.py --plugin_name "lammps" --mdi "-role DRIVER -name driver -method LINK -plugin_path /repo/build/lammps/build" --plugin_command_line "-in in.sequence -log log.sequence"


  exaalt2:
    containers:
      container1:
        image: 'mdi/lammps'
        script:
          - pip uninstall pymdi -y
          - cd /repo/build/MDI_Library/build
          - make install
          - cd /repo/tests/exaalt
          - mpiexec -n 4 python3 test.py --plugin_name "lammps" --mdi "-role DRIVER -name driver -method LINK -plugin_path /repo/build/lammps/build" --plugin_command_line "-in in.sequence -log log.sequence"


  mpifind:
    containers:
      container1:
        image: 'mdi/lammps'
        script:
          - echo "----------  MPI  ----------"
          - ldd -r /repo/build/lammps/build/lmp_mdi
          - echo ""
          - echo ""
          - echo "--------- MPI4Py ----------"
          - python3 -c "import mpi4py; print(mpi4py.__path__[0])"
          - echo ""
          - echo ""
          - export MPI4PYLOC=$(python3 -c "import mpi4py; print(mpi4py.__path__[0])")
          - ldd -r ${MPI4PYLOC}/*.so

